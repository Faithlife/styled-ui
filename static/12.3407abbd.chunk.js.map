{"version":3,"sources":["webpack:///./catalog/row-masonry/documentation.md?441b","webpack:///./catalog/row-masonry/documentation.md"],"names":[],"mappings":";;;;;;AACA,gBAAgB,mBAAO,CAAC,CAAO;AAC/B,2BAA2B,mBAAO,CAAC,EAAoB;AACvD,uBAAuB,mBAAO,CAAC,GAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS,mBAAO,CAAC,IAA6D;AAC9F,OAAO;AACP;AACA;AACA,YAAY,KAAU;AACtB;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA,OAAO;AACP;AACA,iEAAiE,eAAe,4BAA4B;AAC5G;AACA,KAAK;AACL;AACA;;;;;;;;AC3BA,o0BAAo0B,IAAI,0CAA0C,oCAAoC,wCAAwC,GAAG,4BAA4B,mBAAmB,iBAAiB,GAAG,yBAAyB,IAAI,qBAAqB,EAAE,qBAAqB,EAAE,oBAAoB,2BAA2B,EAAE,uCAAuC,kbAAkb,mcAAmc,EAAE,iFAAiF,GAAG,YAAY,2EAA2E,EAAE,qBAAqB,IAAI,4BAA4B,EAAE,2BAA2B,0CAA0C,MAAM,cAAc,YAAY,gCAAgC,EAAE,EAAE,WAAW,wDAAwD,+BAA+B,sBAAsB,Y","file":"static/12.3407abbd.chunk.js","sourcesContent":["\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../node_modules/raw-loader/index.js!./documentation.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../node_modules/raw-loader/index.js!./documentation.md\", function() {\n            component.setState({\n              content: require(\"!!../../node_modules/raw-loader/index.js!./documentation.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./catalog/row-masonry/documentation.md\n// module id = 1432\n// module chunks = 12","module.exports = \"A component for layout out elements in a horizontal masonry style. This layout uses varying row heights to allow multiple elements of varying aspect ratio to align to the width of a container.\\r\\n\\r\\nNOTE: This is a JavaScript-based layout that requires a known container width. It may not be appropriate for uses cases where server-rendered content is required.\\r\\n\\r\\n## Possible polyfill requirements\\r\\n\\r\\nThis component assumes the availability of the following APIs, which may require polyfills in your application:\\r\\n\\r\\n- `ResizeObserver`\\r\\n\\r\\n## Automatic layout for in-memory collections\\r\\n\\r\\n`AutoSizedRowMasonry` is a high-level component that uses a `ResizeObserver` to track the size of the container and automatically handle rendering.\\r\\n\\r\\n```react\\r\\nshowSource: true\\r\\n---\\r\\n<Box maxWidth={400}>\\r\\n\\t<AutoSizedRowMasonry\\r\\n\\t\\titems={new Array(20).fill(true).map(x => ({aspectRatio: (Math.random() + 0.2) * 2 }))}\\r\\n\\t\\tgetItemAspectRatio={x => x.aspectRatio}\\r\\n\\t\\tgapSize={12}\\r\\n\\t\\ttargetRowHeight={100}\\r\\n\\t\\tminRowItems={1}\\r\\n\\t\\tmaxRowItems={4}\\r\\n\\t\\trenderItem={x => (\\r\\n\\t\\t\\t<Box flex={1} backgroundColor=\\\"blue2\\\" />\\r\\n\\t\\t)}\\r\\n\\t/>\\r\\n</Box>\\r\\n```\\r\\n\\r\\nIf you need more flexibility (such as for virtualized rendering), you can use the lower-level components.\\r\\n\\r\\nThe `getRowLayout` function accepts a collection of items and parameters to use in the layout calculation, and returns layout information. Use the layout data to compose `MasonryRow` and `MasonryCell` elements into the final layout.\\r\\n\\r\\n```\\r\\nconst layout =\\r\\n\\tgetRowLayout(items, {\\r\\n\\t\\tgetItemAspectRatio, // function that accepts an item and returns a number representing the item's aspect ratio (width / height)\\r\\n\\t\\twidth: 300, // width of the container in pixels\\r\\n\\t\\tgapWidth: 12, // width of the gap between columns in pixels\\r\\n\\t\\ttargetHeight: 100, // target row height to shoot for, in pixels\\r\\n\\t\\tminRowItems: 1, // minimum number of items per row\\r\\n\\t\\tmaxRowItems: 4, // maximum number of items per row\\r\\n\\t});\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t<Box display=\\\"grid\\\" gridAutoFlow=\\\"row\\\" gridRowGap={12}>\\r\\n\\t\\t\\t{layout.rows.map((row, i) => (\\r\\n\\t\\t\\t\\t\\t<MasonryRow\\r\\n\\t\\t\\t\\t\\t\\tkey={i}\\r\\n\\t\\t\\t\\t\\t\\trow={row}\\r\\n\\t\\t\\t\\t\\t\\trenderCell={({ item, aspectRatio, index }) => (\\r\\n\\t\\t\\t\\t\\t\\t\\t<MasonryCell key={index} aspectRatio={aspectRatio}>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<Box flex={1}>{item.title}</Box>\\r\\n\\t\\t\\t\\t\\t\\t\\t</MasonryCell>\\r\\n\\t\\t\\t\\t\\t\\t)}\\r\\n\\t\\t\\t\\t\\t/>\\r\\n\\t\\t\\t\\t))}\\r\\n\\t\\t</Box>\\r\\n\\t);\\r\\n```\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./catalog/row-masonry/documentation.md\n// module id = 1488\n// module chunks = 12"],"sourceRoot":""}